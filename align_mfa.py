"""
Prepare files for MFA, execute MFA, and parse resulting TextGrid.

This module handles the integration with Montreal Forced Aligner (MFA) for
forced alignment of audio with transcript text. It prepares the required
corpus structure, executes MFA alignment, and parses the resulting TextGrid
to extract precise word and sentence timing information.

The module assumes that MFA is installed and available in the system PATH.

Main functions:
- run_mfa_alignment: Prepare corpus, execute MFA alignment, return TextGrid path
- parse_textgrid_for_sentences: Parse TextGrid + transcript to produce sentence list with timestamps

Notes:
- MFA expects WAV+lab/txt pairs with matching basenames
- This implementation uses heuristics to map sentences to aligned word sequences
"""
from pathlib import Path
import subprocess
import shutil
from textgrid import TextGrid
import re
from typing import List, Dict, Any
from utils import setup_logger


def run_mfa_alignment(wav_path: Path, transcript_path: Path, out_dir: Path, mfa_lang: str = "spanish") -> Path:
    """
    Prepare a small corpus for MFA, copy WAV and transcript to matching basename, and execute MFA alignment.

    This function creates the required corpus structure for MFA by copying the audio file
    and transcript to a corpus directory with matching basenames. It then executes the
    MFA alignment command and returns the path to the generated TextGrid file.

    MFA requires:
    - Audio file in WAV format (16kHz, mono, 16-bit PCM)
    - Transcript file with same basename as audio file
    - Acoustic model and pronunciation dictionary for the target language

    Args:
        wav_path: Path to preprocessed WAV file (16kHz, mono, 16-bit PCM)
        transcript_path: Path to text file containing orthographic transcription
        out_dir: Directory where MFA will deposit results
        mfa_lang: Name of language model for MFA (e.g. 'spanish', 'english')

    Returns:
        Path: Path to TextGrid file generated by MFA

    Raises:
        subprocess.CalledProcessError: If MFA alignment command fails
        FileNotFoundError: If TextGrid is not found after MFA execution

    Example:
        >>> textgrid_path = run_mfa_alignment(
        ...     Path('audio.wav'),
        ...     Path('transcript.txt'),
        ...     Path('output'),
        ...     'spanish'
        ... )
    """
    logger = setup_logger()
    wav_path = Path(wav_path)
    transcript_path = Path(transcript_path)
    out_dir = Path(out_dir)


    # Prepare corpus dir
    corpus_dir = out_dir / "corpus"
    if corpus_dir.exists():
        shutil.rmtree(corpus_dir)
    corpus_dir.mkdir(parents=True)


    # MFA expects: wav file(s) + matching .lab/.txt transcripts with same basename
    basename = wav_path.stem
    wav_dst = corpus_dir / f"{basename}.wav"
    txt_dst = corpus_dir / f"{basename}.lab"  # MFA accepts .lab or .txt files
    shutil.copy(wav_path, wav_dst)
    shutil.copy(transcript_path, txt_dst)


    # Run MFA align
    mfa_out_dir = out_dir / "mfa_aligned"
    if mfa_out_dir.exists():
        shutil.rmtree(mfa_out_dir)
    mfa_out_dir.mkdir(parents=True)

    # Command example:
    # mfa align <corpus_dir> <dictionary_or_lang> <output_dir> --clean
    # We assume the user has installed an acoustic/lexicon model named mfa_lang
    cmd = [
        "mfa", "align",
        str(corpus_dir),
        mfa_lang,
        str(mfa_out_dir),
        "--clean"
    ]
    logger.debug("Running MFA: %s", " ".join(cmd))

    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        logger.error("MFA failed with return code %s. Please ensure MFA is installed and models are available.", e.returncode)
        raise

    # Search for TextGrid in output (MFA writes TextGrid files within the output directory)
    tg = None
    for p in mfa_out_dir.glob("*.TextGrid"):
        tg = p
        break
    if tg is None:
        # Sometimes MFA creates a subdirectory with the basename
        nested = mfa_out_dir / basename
        if nested.exists():
            tg = next(nested.glob("*.TextGrid"), None)

    if tg is None:
        logger.error("No TextGrid found after running MFA. Please check MFA logs in stdout/stderr.")
        raise FileNotFoundError("TextGrid not generated")

    logger.info("TextGrid generated at: %s", tg)
    return tg
